import os
from langchain_google_genai import ChatGoogleGenerativeAI
from dotenv import load_dotenv
import json

dotenv_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), ".env")
load_dotenv(dotenv_path)

api_key = os.getenv("GEMINI_API_KEY")

llm = ChatGoogleGenerativeAI(
    model="gemini-pro", temperature=0.7, google_api_key=api_key
)


def analyze_mood_and_preferences(text, limit):
    artistas = max(2, int(limit / 5))  # Garante pelo menos 2 artistas sugeridos
    musicas_minimas = max(5, limit)  # Garante pelo menos 5 m√∫sicas sugeridas

    prompt = f"""Voc√™ √© um assistente de IA especializado em entender emo√ß√µes e prefer√™ncias musicais.
    Dado o seguinte texto do usu√°rio: "{text}", identifique as seguintes informa√ß√µes:

    - **Mood** (emo√ß√£o predominante): Pode ser 'feliz', 'triste', 'relaxado', 'animado', etc.
    - **Genre** (g√™nero musical): Se o usu√°rio mencionou um g√™nero, extraia-o (exemplo: rock, pop, jazz).
    - **Artist** (artista): Se o usu√°rio mencionou um artista, extraia o nome do artista.
    - **Country** (pa√≠s): Se o usu√°rio mencionou um pa√≠s, extraia o nome do pa√≠s.

    ### üéµ REGRAS PARA GERA√á√ÉO DE ARTISTAS E M√öSICAS:
    1. **Se for identificado um g√™nero musical**, **sugira pelo menos {artistas} artistas** populares desse g√™nero que estejam em alta, garantindo que sejam reconhecidos pelo Spotify.
    2. **Se o usu√°rio n√£o mencionou um g√™nero, identifique um baseado no humor predominante** e sugira artistas populares desse g√™nero.
    3. **Sempre gere pelo menos {musicas_minimas} m√∫sicas sugeridas** para a playlist, **priorizando m√∫sicas populares e recentes**.
    4. **Se nenhuma m√∫sica espec√≠fica for mencionada, selecione automaticamente m√∫sicas populares do g√™nero indicado**.

    ### üî• FORMATO DAS M√öSICAS:
    - **Substitua espa√ßos por `%`** nos nomes das m√∫sicas e artistas (exemplo: `"Radioactive%Imagine%Dragons"`).
    - **Cada m√∫sica deve conter o nome do artista junto** (exemplo: `"Bohemian%Rhapsody%Queen"`).
    - **Use formata√ß√£o precisa para evitar erros na busca**.

    ### üìù RESPOSTA JSON (SOMENTE O JSON, SEM EXPLICA√á√ïES!):
    {{
        "mood": "feliz",
        "genre": "rock",
        "artist": "Coldplay, Imagine Dragons, Linkin Park, Foo Fighters, Red Hot Chili Peppers",
        "country": "EUA",
        "tracks": [
            "Radioactive%Imagine%Dragons",
            "Californication%Red%Hot%Chili%Peppers",
            "Best%of%You%Foo%Fighters"
        ]
    }}

    ### üöÄ OBSERVA√á√ïES IMPORTANTES:
    - Se alguma informa√ß√£o n√£o for mencionada, retorne `null` nesse campo.
    - **Se nenhuma m√∫sica for identificada, selecione automaticamente m√∫sicas populares** do g√™nero identificado.
    - **Nunca retorne m√∫sicas com espa√ßos!** Sempre use `%` no lugar de espa√ßos.
    - Se o Gemini n√£o conseguir sugerir m√∫sicas, **ele deve retornar `"tracks": []"` e o Spotify ser√° usado**.

    **Gere apenas o JSON e nada mais.**
    """

    response = llm.invoke(prompt)
    if hasattr(response, "content"):
        json_content = response.content
    else:
        print("Erro: O objeto de resposta n√£o tem um atributo 'content'.")
        return {"mood": "desconhecido", "genre": None, "artist": None, "country": None}

    try:
        result = json.loads(json_content)
        print(result)
        return result
    except json.JSONDecodeError:
        print("Erro ao interpretar JSON:", json_content)
        return {"mood": "desconhecido", "genre": None, "artist": None, "country": None}


def analyze_mood_title(text):
    prompt = f"""Voc√™ √© um assistente de IA especializado em entender emo√ß√µes e prefer√™ncias musicais.
    Dado o seguinte texto do usu√°rio: "{text}", identifique as seguintes informa√ß√µes:

    - **Mood** (emo√ß√£o predominante): Pode ser 'feliz', 'triste', 'relaxado', 'animado', etc.
    - **Genre** (g√™nero musical): Se o usu√°rio mencionou um g√™nero, extraia-o (exemplo: rock, pop, jazz).
    - **Artist** (artista): Se o usu√°rio mencionou um artista, extraia o nome do artista.
    - **Country** (pa√≠s): Se o usu√°rio mencionou um pa√≠s, extraia o nome do pa√≠s.

    Com base nesses dados, gere um **t√≠tulo engra√ßado** para a playlist com no m√°ximo **20 caracteres**.

    Exemplos:
    - "Estou feliz e quero um samba" ‚Üí "Sambando na Felicidade"
    - "Quero rock triste" ‚Üí "Headbanging e Choro"
    - "Pop animado dos EUA" ‚Üí "Pop Star na Veia"

    **Sa√≠da esperada:** Apenas o t√≠tulo gerado, sem explica√ß√µes adicionais.
    """

    response = llm.invoke(prompt)

    title = response.content.strip().split("\n")[0]

    title = title[:20].strip()

    print(f"[DEBUG] T√≠tulo gerado: {title}")  # Log para depura√ß√£o

    return title
